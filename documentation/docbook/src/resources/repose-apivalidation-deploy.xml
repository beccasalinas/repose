<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book [
<!-- product name is likely to change; parameterize full name, abbreviated name, expanded name -->
<!ENTITY PRODNAME "Repose">
<!ENTITY PRODABBREV "Repose">
<!ENTITY PRODEXPAND "REstful PrOxy Service Engine">
    <!-- Some useful entities borrowed from HTML -->
    <!ENTITY ndash  "&#x2013;">
    <!ENTITY mdash  "&#x2014;">
    <!ENTITY hellip "&#x2026;">

    <!-- Useful for describing APIs -->
    <!ENTITY GET    '<command xmlns="http://docbook.org/ns/docbook">GET</command>'>
    <!ENTITY PUT    '<command xmlns="http://docbook.org/ns/docbook">PUT</command>'>
    <!ENTITY POST   '<command xmlns="http://docbook.org/ns/docbook">POST</command>'>
    <!ENTITY DELETE '<command xmlns="http://docbook.org/ns/docbook">DELETE</command>'>

    <!ENTITY CHECK  '<inlinemediaobject xmlns="http://docbook.org/ns/docbook">
        <imageobject>
        <imagedata fileref="img/Check_mark_23x20_02.svg"
        format="SVG" scale="60"/>
        </imageobject>
        </inlinemediaobject>'>

    <!ENTITY ARROW  '<inlinemediaobject xmlns="http://docbook.org/ns/docbook">
        <imageobject>
        <imagedata fileref="img/Arrow_east.svg"
        format="SVG" scale="60"/>
        </imageobject>
        </inlinemediaobject>'>
]>
<!-- in BOOK below, add status="draft" to set watermark on cover and left margin -->
<book version="5.0" xmlns="http://docbook.org/ns/docbook"
      xmlns:xlink="http://www.w3.org/1999/xlink"
      xmlns:xi="http://www.w3.org/2001/XInclude"
      xmlns:svg="http://www.w3.org/2000/svg"
      xmlns:m="http://www.w3.org/1998/Math/MathML"
      xmlns:html="http://www.w3.org/1999/xhtml"
      xmlns:db="http://docbook.org/ns/docbook" 
      xml:id="Repose-Ratelimiting-Deployment-Guide">
    <?rax pdf.url="../../repose-ratelimiting-deploy.pdf"?>
    <title>&PRODNAME; API Validation Component Deployment
        Handbook</title>
    <!-- set watermark on cover and left margin 
        <?rax status.bar.text="CONFIDENTIAL"?>
    -->
    <?rax title.font.size="35px" subtitle.font.size="16px"?>
    <titleabbrev>&PRODABBREV; Translation Deployment</titleabbrev>
    <info>
        <author>
            <personname>
                <firstname/>
                <surname/>
            </personname>
            <affiliation>
                <orgname>Rackspace Cloud</orgname>
            </affiliation>
        </author>
        <copyright>
            <year>2010</year>
            <year>2011</year>
            <year>2012</year>
            <holder>Rackspace US, Inc.</holder>
        </copyright>
        <releaseinfo>v2.4.1</releaseinfo>
        <productname>&PRODNAME;</productname>
        <pubdate>2012-12-11</pubdate>
        <legalnotice role="apache2">
            <annotation>
                <remark>Copyright details are filled in by the template.</remark>
            </annotation>
        </legalnotice>
        <abstract>
            <para>This document is intended for systems administrators
                interested in configuring their service to use the
                API Validation component of the &PRODEXPAND;. </para>
        </abstract>
        <revhistory>
            <revision>
                <date>2012-12-11</date>
                <revdescription>
                    <itemizedlist spacing="compact">
                        <listitem>
                            <para>Initial release as internal
                                draft.</para>
                        </listitem>
                    </itemizedlist>
                </revdescription>
            </revision>
        </revhistory>
    </info>
    <chapter xml:id="Overview-d1e85">
        <title>About This Document</title>
            <para> 
                The purpose of this handbook is to facilitate deployment of &PRODNAME;'s API Validation component. This handbook is not a tutorial. It provides basic information
                that will help you understand and deploy this &PRODNAME; component, but you must
                adapt this information to suit your own configuration. 
            </para>  
            <para>
                This handbook is focused on one &PRODNAME; component.
                Other &PRODNAME; components are documented in companion handbooks.
            </para>
        <section xml:id="Document_Change_History-d1e102">
            <title>Document Change History</title>
            <para>This version of the handbook replaces and obsoletes all previous versions.
            The most recent changes are described in the table below: </para>
            <?rax revhistory?>
        </section>
        <xi:include href="chapters/available-doc.xml"/>
    </chapter>
    <!-- naming this section xml:id="Introduction-000" to make it the first page opened in HTML, matching <webhelpDefaultTopic>Introduction-000.html</webhelpDefaultTopic> in pom.xml -->
    <chapter xml:id="Introduction-000">
        <title>Introduction to the API Validation Component of
            &PRODNAME;</title>
        <para> API validation examines an API request and confirms
            that it is constructed correctly before forwarding it to
            its destination. </para>
        <para> To use &PRODNAME; for API validation, you must add the
            API validation component as a filter in your &PRODNAME;
            configuration. You can learn more about customizing your
            &PRODNAME; configuration by reading the <link
                xlink:href="http://openrepose.org/documentation/repose-deploy/content/Introduction-000.html"
                >Repose Deployment Handbook</link> and by examining a
                <link
                xlink:href="https://github.com/rackspace/repose/blob/master/project-set/core/core-lib/src/main/resources/META-INF/schema/examples/system-model.cfg.xml"
                >basic system model configuration</link> in GitHub. </para>
        <para> 
            To understand the &PRODNAME; API validation filter,
            you should understand several related concepts:
            <itemizedlist>
                <listitem><para>Application Programming Interface (API)</para></listitem>
                <listitem><para>Web Application Description Language (WADL)</para></listitem>
                <listitem><para>stylesheets</para></listitem>
            </itemizedlist>
        </para>
        <tip>
            <para> API validation processing is controlled by
                    <code>validator.cfg.xml</code>; to change your
                validation configuration, edit
                    <code>validator.cfg.xml</code>. You can see an
                annotated example of <code>validator.cfg.xml</code> in
                    <xref linkend="Configuration-d1e365"/>. </para>
        </tip>
        <section xml:id="Intro_API-000">
            <title>Understanding APIs and the API Validation Component of &PRODNAME;</title>
            <para>Explain the scope of what we can validate: only REST
                API requests.</para>
        </section>
        <section xml:id="Intro_WADL-000">
            <title>Understanding WADL and the API Validation Component of &PRODNAME;</title>
            <para>Explain how we use WADL to describe what we are
                validating.</para>
        </section>        
        <section xml:id="Intro_stylesheet-000">
            <title>Understanding Stylesheets and the API Validation Component of &PRODNAME;</title>
            <para>Explain how we use stylesheets to recognize what is
                and is not valid and possibly to make the invalid
                valid.</para>
        </section>
    </chapter>
    <chapter xml:id="Configuration-d1e365">
        <title>Configuration</title>
        <tip>
            <para> Before attempting to customize your validation
                configuration and its stylesheets, familiarize
                yourself with the basic &PRODNAME; concepts and
                deployment methods in our <link
                    xlink:href="hhttp://openrepose.org/documentation/repose-intro/content/Introduction-000.html"
                    >Getting Started</link> document. </para>
        </tip>
        <para> The API validation component obtains its configuration,
            including its API endpoint, from a file named
                <code>validator.cfg.xml</code>. We have included an
            annotated example of a valid
                <code>validator.cfg.xml</code> in this chapter.</para>
        <para> To change your validation configuration, edit
                <code>validator.cfg.xml</code> at any time. </para> 
        <para>
            The validation component uses your validation configuration to recognize whether an API request is valid. 
            If an API request is not valid, the validation component handles it as specified in your response messaging configuration at <code>response-messaging.cfg.xml</code>. 
        </para>
        <section xml:id="Customizing_Validation_Configuration-d1e375">
        <title>Customizing a Validation Configuration</title>
        <para> Your validation configuration in
                    <code>validator.cfg.xml</code> will resemble the
                following example: </para>
        <example>
            <title>Validation Configuration</title>
            <programlistingco>
                <areaspec>
                    <area xml:id="cfg.validators"
                        units="linecolumn" coords="3 1"/>
                    <area xml:id="cfg.multi-role-match"
                        units="linecolumn" coords="4 5"/>
                    <area xml:id="cfg.validator"
                        units="linecolumn" coords="9 5"/>
                    <area xml:id="cfg.style-sheets" units="linecolumn"
                        coords="10 13"/>
                    <area xml:id="cfg.style" units="linecolumn"
                        coords="11 17"/>
                    <area xml:id="cfg.href" units="linecolumn"
                        coords="11 24"/>
                    <area xml:id="cfg.code-regex" units="linecolumn"
                        coords="16 13"/>
                    <area xml:id="cfg.param" units="linecolumn"
                        coords="26 21"/>
                    <area xml:id="cfg.name" units="linecolumn"
                        coords="27 25"/>
                    <area xml:id="cfg.value" units="linecolumn"
                        coords="28 25"/>
                </areaspec>
                <programlisting language="xml">
<xi:include href="samples/repose-apivalidation-validator.cfg.xml" parse="text"/>
            </programlisting>
            </programlistingco>
        </example>
        <para> Key elements of the preceding example are labeled with
            callouts and explained below: </para>
        <calloutlist>
            <callout arearefs="cfg.validators">
                <para> Multiple validators can be defined within this <code>&lt;validators&gt;</code> wrapper.</para>
                <para> </para>
            </callout>
            <callout arearefs="cfg.multi-role-match">
                <para>
                    When set to <code>true</code>, validation is attempted for the <code>X-Roles</code> header; validation is attempted for every match until one is valid.
                </para>
                <para>
                    When set to <code>false</code> or not set, validation is attempted for the <code>X-Roles</code> header; validation is attempted for only the first match.
                </para>
                <para> </para>
            </callout>
            <callout arearefs="cfg.validator">
                <para> One validator is be defined within this <code>&lt;validator&gt;</code> wrapper.
                    </para>
                <para> </para>
            </callout>
            <callout arearefs="cfg.style-sheets">
                <para> This element contains the list of style sheets to be applied for this translation chain.</para>
                <para> </para>
            </callout>
            <callout arearefs="cfg.style">
                <para> This element specifies one style sheet within the chain. </para>
                <para> </para>
            </callout>
            <callout arearefs="cfg.href">
                <para> This is a URI which specifies the location of the style sheet. 
                    If a relative path is specified, then this will be relative to the &PRODNAME; configuration directory. </para>
                <para> </para>
            </callout>
            <callout arearefs="cfg.code-regex">
                <para>
                    <code>code-regex</code> is a regular express (regex) specifying the response codes to which this style sheet chain should be applied. 
                    For example, <code>4[\d]{2}</code> matches all response codes in the range from 400 to 499.</para>
                <para> </para>
            </callout>
            <callout arearefs="cfg.param">
                <para>
                    A style sheet can accept any number of parameters. 
                    These parameters will be passed into the transform associated with the style sheet. </para>
                <para> </para>
            </callout>
            <callout arearefs="cfg.name">
                <para>
                    This is the name of a parameter to be passed in. </para>
                <para> </para>
            </callout>
            <callout arearefs="cfg.value">
                <para>
                    This is the value of a parameter to be passed in. </para>
                <para> </para>
            </callout>
        </calloutlist>
        </section>
            <section xml:id="Customizing_Response_Messaging-d1e385">
                <title>Customizing a Response Messaging Configuration</title>
                <para>
                    If a request fails validation, then an appropriate <link xlink:href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html">HTTP response code</link> is returned.  
                    For example:
                    <itemizedlist>
                        <listitem><para>If the validator determines that the URI is invalid, a 404 is returned.</para></listitem>
                        <listitem><para>If the validator determines that the URI is valid but the method is not appropriate for the URI, then a 405 is returned.</para></listitem>
                    </itemizedlist>
                    You can provide an appropriate error message along with the response code by configuring the response messaging service.
                </para>
                <para> 
                    The &PRODNAME; API validation component processes invalid requests based on the response messaging configuration at <code>response-messaging.cfg.xml</code>.
                    To change the response messaging configuration, edit <code>response-messaging.cfg.xml</code> at any time.
                </para>
                <para> A valid response messaging configuration resembles the following
                example: </para>
                <example>
                    <title>Response Messaging Configuration</title>
<programlisting language="xml">
<xi:include href="samples/repose-apivalidation-response-messaging.cfg.xml" parse="text"/>
</programlisting>
                </example>    
                <para>
                    In this example, 
                    only status code 404 receives additional message handling. 
                    In the case of a 404 only, an XML response is formatted as XML (<code><![CDATA[<error-message>%M</error-message>]]></code>)
                    and a JSON response is formatted as JSON (<code><![CDATA[{"error-message": "%M"}]]></code>).
                </para>
        </section>
    </chapter>
    <chapter xml:id="Deployment-d1e105">
        <title>Deployment</title>
        <para> 
            The validation filter is packaged in the extensions filter bundle.  
            When you initially deploy &PRODNAME;, your filter directory should contain <code>filter-bundle-&lt;version&gt;.ear</code>.
            Copy <code>extensions-filter-bundle-&lt;version&gt;.ear</code> to the same directory.
            Then update your <code>system-model.cfg.xml</code> to add &lt;filter name="api-validator"/&gt; to your filter chain. 
        </para>
        <para>
            Once <code>validator.cfg.xml</code> is in place, the EAR file is deployed, and the filter is added to the filter chain list, 
            the filter will begin validating requests against the configured WADLs.
        </para>
        <para>
            The validation filter is dependent upon third party libraries. 
            When running on a servlet container such as Tomcat or Glassfish, you should increase the servlet container's <code>PermGen</code> memory size to accommodate the additional libraries used by the validator.
            The ideal value depends upon your configuration; 
            <code>export JAVA_OPTS="$JAVA_OPTS -XX:MaxPermSize=256m"</code> may be sufficient 
        </para>
    </chapter>
    <chapter xml:id="Optimization-d1e107">
        <title>Optimization</title>
        <para> 
            Talk about how to use all the .dot drawings here.
        </para>
    </chapter>
    <xi:include href="chapters/afterword.xml"/>
</book>