<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book [
<!-- product name is likely to change; parameterize full name, abbreviated name, expanded name -->
<!ENTITY PRODNAME "Repose">
<!ENTITY PRODABBREV "Repose">
<!ENTITY PRODEXPAND "REstful PrOxy Service Engine">
    <!-- Some useful entities borrowed from HTML -->
    <!ENTITY ndash  "&#x2013;">
    <!ENTITY mdash  "&#x2014;">
    <!ENTITY hellip "&#x2026;">

    <!-- Useful for describing APIs -->
    <!ENTITY GET    '<command xmlns="http://docbook.org/ns/docbook">GET</command>'>
    <!ENTITY PUT    '<command xmlns="http://docbook.org/ns/docbook">PUT</command>'>
    <!ENTITY POST   '<command xmlns="http://docbook.org/ns/docbook">POST</command>'>
    <!ENTITY DELETE '<command xmlns="http://docbook.org/ns/docbook">DELETE</command>'>

    <!ENTITY CHECK  '<inlinemediaobject xmlns="http://docbook.org/ns/docbook">
        <imageobject>
        <imagedata fileref="img/Check_mark_23x20_02.svg"
        format="SVG" scale="60"/>
        </imageobject>
        </inlinemediaobject>'>

    <!ENTITY ARROW  '<inlinemediaobject xmlns="http://docbook.org/ns/docbook">
        <imageobject>
        <imagedata fileref="img/Arrow_east.svg"
        format="SVG" scale="60"/>
        </imageobject>
        </inlinemediaobject>'>
]>
<!-- in BOOK below, add status="draft" to set watermark on cover and left margin -->
<book version="5.0" xmlns="http://docbook.org/ns/docbook"
      xmlns:xlink="http://www.w3.org/1999/xlink"
      xmlns:xi="http://www.w3.org/2001/XInclude"
      xmlns:svg="http://www.w3.org/2000/svg"
      xmlns:m="http://www.w3.org/1998/Math/MathML"
      xmlns:html="http://www.w3.org/1999/xhtml"
      xmlns:db="http://docbook.org/ns/docbook" 
      xml:id="Repose-Ratelimiting-Deployment-Guide">
    <?rax pdf.url="../../repose-ratelimiting-deploy.pdf"?>
    <title>&PRODNAME; Translation Component Deployment Handbook</title>
    <!-- set watermark on cover and left margin -->
    <?rax status.bar.text.font.size="40px" status.bar.text="DRAFT"?>
    <!-- size line1 & line2 of title on PDF cover -->
    <?rax title.font.size="35px" subtitle.font.size="16px"?>
    <titleabbrev>&PRODABBREV; Translation Deployment</titleabbrev>
    <info>
        <author>
            <personname>
                <firstname/>
                <surname/>
            </personname>
            <affiliation>
                <orgname>Rackspace Cloud</orgname>
            </affiliation>
        </author>
        <copyright>
            <year>2010</year>
            <year>2011</year>
            <year>2012</year>
            <year>2013</year>
            <holder>Rackspace US, Inc.</holder>
        </copyright>
        <releaseinfo>v2.3.4</releaseinfo>
        <productname>&PRODNAME;</productname>
        <pubdate>2013-02-21</pubdate>
        <legalnotice role="apache2">
            <annotation>
                <remark>Copyright details are filled in by the template.</remark>
            </annotation>
        </legalnotice>
        <abstract>
            <para>This document is intended for systems administrators
                interested in configuring their service to use the
                Translation component of the &PRODEXPAND;. </para>
        </abstract>
        <revhistory>
            <revision>
                <date>2012-02-21</date>
                <revdescription>
                    <itemizedlist spacing="compact">
                        <listitem><para>Restructured, with separate chapters for changing a request and changing a response.</para></listitem>
                    </itemizedlist>
                </revdescription>
            </revision>
            <revision>
                <date>2012-02-11</date>
                <revdescription>
                    <itemizedlist spacing="compact">
                        <listitem><para>Added examples of translating XML to JSON, XML to Atom, and XML to HTML.</para></listitem>
                    </itemizedlist>
                </revdescription>
            </revision>
            <revision>
                <date>2012-11-23</date>
                <revdescription>
                    <itemizedlist spacing="compact">
                        <listitem><para>Initial release as internal draft.</para></listitem>
                    </itemizedlist>
                </revdescription>
            </revision>
        </revhistory>
    </info>
    <chapter xml:id="Overview-d1e85">
        <title>About This Document</title>
            <para> 
                The purpose of this handbook is to facilitate deployment of &PRODNAME;'s translation component. This handbook is not a tutorial. It provides basic information
                that will help you understand and deploy this &PRODNAME; component, but you must
                adapt this information to suit your own configuration. 
            </para>  
            <para>
                This handbook is focused on one &PRODNAME; component.
                Other &PRODNAME; components are documented in companion handbooks.
            </para>
        <section xml:id="Document_Change_History-d1e102">
            <title>Document Change History</title>
            <para>This version of the handbook replaces and obsoletes all previous versions.
            The most recent changes are described in the table below: </para>
            <?rax revhistory?>
        </section>
        <xi:include href="chapters/available-doc.xml"/>
    </chapter>
    <!-- naming this section xml:id="Introduction-000" to make it the first page opened in HTML, matching <webhelpDefaultTopic>Introduction-000.html</webhelpDefaultTopic> in pom.xml -->
    <chapter xml:id="Introduction-000">
        <title>Introduction to the Translation Component of &PRODNAME;</title>
        <para> Translation changes the format of a request or response
            so that it meets the expectations of the service or client
            that receives it. You can use &PRODNAME;'s translation
            filter to transform XML into JSON. You can also use
            &PRODNAME;'s translation filter to transform JSON into
            JSONx, which is formatted like XML. Whether or not you
            transform the body of the message into another format, you
            can use the translation filter to remove elements that are
            invalid for the receiver or to add elements that are
            required by the receiver. This means you can choose
            components to combine in a stack based on their core
            features; without the &PRODNAME; translation filter,
            incompatible standards for output and input might make
            some otherwise-beneficial combinations impractical.</para>
        <para>
            To use &PRODNAME; for translation, you must add the translation component as a filter in your &PRODNAME; configuration. 
            You can learn more about customizing your &PRODNAME; configuration 
            by reading the 
            <link xlink:href="http://openrepose.org/documentation/repose-deploy/content/Introduction-000.html">Repose Deployment Handbook</link>
            and by examining a  
            <link xlink:href="https://github.com/rackspace/repose/blob/master/project-set/core/core-lib/src/main/resources/META-INF/schema/examples/system-model.cfg.xml">basic system model configuration</link>
            in GitHub.
        </para>
        <para> &PRODNAME; uses 
            <link xlink:href="http://saxon.sourceforge.net/">Saxon 9.3</link>
            to perform translation by
            applying <link xlink:href="http://www.w3.org/TR/xslt20/"
                >XSLT 2.0 stylesheets</link> to requests and
            responses. In addition to adding the translation filter to
            your configuration, you must create and customize your
            stylesheets to define the changes you wish the translation
            filter to perform. </para>
         <para> The &PRODNAME; translation component performs two
            categories of behavior: <itemizedlist>
                <listitem>
                    <para>
                        <link linkend="Change_Format-d1e105"
                            >changing the format of a message</link>
                        (translating between JSON and XML)</para>
                </listitem>
                <listitem>
                    <para>
                        <link linkend="Change_Content-d1e125"
                            >changing the content of a message</link>
                        (adding or deleting elements)</para>
                </listitem>
            </itemizedlist>
        </para>
        <tip>
            <para> Translation processing is controlled by
                    <code>translation.cfg.xml</code>; to change your
                translation configuration, edit
                    <code>translation.cfg.xml</code>. You can see an
                annotated example of <code>translation.cfg.xml</code>
                in <xref linkend="Configuration-d1e365"/>. </para>
        </tip>
    </chapter>
    <chapter xml:id="Configuration-d1e365">
        <title>Configuration</title>
        <tip>
            <para> Before attempting to customize your translation
                configuration and its stylesheets, familiarize
                yourself with the basic &PRODNAME; concepts and
                deployment methods in our <link
                    xlink:href="hhttp://openrepose.org/documentation/repose-intro/content/Introduction-000.html"
                    >Getting Started</link> document. </para>
        </tip>
        <para> The translation component obtains its configuration,
            including its API endpoint, from a file named
                <code>translation.cfg.xml</code>. We have included an
            annotated example of a valid
                <code>translation.cfg.xml</code> in this
            chapter.</para>
        <para> To change your translation configuration, edit
                <code>translation.cfg.xml</code> at any time. Within
                <code>translation.cfg.xml</code>, you can specify
            which stylesheets are to be applied under what
            circumstances; as with the translation configuration, you
            can edit your stylesheets to make changes at runtime.                                                         </para>
        <para>The translation component configuration files:</para>
        <para>   - translation.cfg.xml </para>
        <para>   - translation.xsd</para>
        <para>    - xproc.xsd</para>
        <para> are compiled through XJC to create a translation config
            Java object that is used by the translation component. The
            translation.cfg.xml file should be placed in the same
            configuration directory as the other Repose configuration
            files; for example, /etc/powerapi. The translation files
            consumed by the translation component (for example,
            some-translation-file.xsl) may be placed at any valid href
            location accessible by the Repose node.</para> 
        <section xml:id="Customizing_Translation_Configuration-d1e375">
        <title>Customizing a Translation Configuration</title>
        <para>
            Your translation configuration in <code>translation.cfg.xml</code> will resemble the following example:
        </para>
        <example>
            <title>Translation Configuration</title>
            <programlistingco>
                <areaspec>
                    <area xml:id="cfg.translations"
                        units="linecolumn" coords="3 1"/>
                    <area xml:id="cfg.content-type"
                        units="linecolumn" coords="10 13"/>
                    <area xml:id="cfg.accept"
                        units="linecolumn" coords="11 13"/>
                    <area xml:id="cfg.translated-content-type"
                        units="linecolumn" coords="12 13"/>
                    <area xml:id="cfg.style-sheets" 
                        units="linecolumn" coords="13 13"/>
                    <area xml:id="cfg.style" 
                        units="linecolumn" coords="14 17"/>
                    <area xml:id="cfg.href" 
                        units="linecolumn" coords="15 24"/>
                    <area xml:id="cfg.code-regex" 
                        units="linecolumn" coords="21 13"/>
                    <area xml:id="cfg.param" 
                        units="linecolumn" coords="33 21"/>
                    <area xml:id="cfg.name" 
                        units="linecolumn" coords="34 25"/>
                    <area xml:id="cfg.value" 
                        units="linecolumn" coords="35 25"/>
                </areaspec>
                <programlisting language="xml">
<xi:include href="samples/repose-translation.cfg.xml" parse="text"/>
            </programlisting>
            </programlistingco>
        </example>
        <para> Key elements of the preceding example are labeled with
            callouts and explained below: </para>
        <calloutlist>
            <callout arearefs="cfg.translations">
                <para> Multiple translations can be defined within this <code>&lt;translations&gt;</code> wrapper.</para>
                <para> </para>
            </callout>
            <callout arearefs="cfg.content-type">
                <para> Content type specifies the response content types to which this style sheet chain should be applied.</para>
                <para> </para>
            </callout>
            <callout arearefs="cfg.accept">
                <para><code>accept</code>
                    Specifies the Accept type to which this chain should be applied. </para>
                <para> </para>
            </callout>
            <callout arearefs="cfg.translated-content-type">
                <para> Specifies the content-type to be output by this chain. The response content-type is set to this if the style sheets are applied successfully.
                    </para>
                <para> </para>
            </callout>
            <callout arearefs="cfg.style-sheets">
                <para> This element contains the list of style sheets to be applied for this translation chain.</para>
                <para> </para>
            </callout>
            <callout arearefs="cfg.style">
                <para> This element specifies one style sheet within the chain. </para>
                <para> </para>
            </callout>
            <callout arearefs="cfg.href">
                <para> This is a URI which specifies the location of
                        the style sheet. If a relative path is
                        specified, then this will be relative to the
                        &PRODNAME; translation configuration,
                            <code>translation.cfg.xml</code>. </para>
                <para> </para>
            </callout>
            <callout arearefs="cfg.code-regex">
                <para>
                        <code>code-regex</code> is a regular
                        expression (regex) specifying the response
                        codes to which this style sheet chain should
                        be applied. For example, <code>4[\d]{2}</code>
                        matches all response codes in the range from
                        400 to 499.</para>
                <para> </para>
            </callout>
            <callout arearefs="cfg.param">
                <para>
                    A style sheet can accept any number of parameters. 
                    These parameters will be passed into the transform associated with the style sheet. </para>
                <para> </para>
            </callout>
            <callout arearefs="cfg.name">
                <para>
                    This is the name of a parameter to be passed in. </para>
                <para> </para>
            </callout>
            <callout arearefs="cfg.value">
                <para>
                    This is the value of a parameter to be passed in. </para>
                    <db:para/>
                    <db:para> The translation element also includes
                        the following attributes: <emphasis
                            role="bold">allow-doc
                        type-dec</emphasis>l: If false, then any
                        request/response body that contains an DOCTYPE
                        section will be rejected. If true, then
                        DOCTYPE sections will be allowed. However,
                        repose will limit the entity definitions
                        allowed in these sections. Default is false.
                            <emphasis role="bold"
                            >multi-match:</emphasis> If true, then all
                        translation chains that match the request will
                        be applied in the order in which they are
                        defined in the configuration. If false, then
                        only the first translation chain to match the
                        request will be applied. Default is false.
                        This attribute was added in version
                        2.6.8.</db:para>
                    <db:para>  For response translations, the user can
                        specify the following information: </db:para>
                    <db:para><emphasis role="bold"
                            >&lt;response-translation>:</emphasis>
                        Response translation specifies a chain of
                        stylesheets to be applied to a response body
                        and the criteria for when the chain should be
                        applied. All of the criteria must match before
                        a chain is applied.</db:para>
                    <db:para>
                        <emphasis role="italic">code-regex</emphasis>:
                        Code regex specifies for which response codes
                        this style sheet chain should be applied. This
                        is a regex. For example, 4[\d]{2} would
                        match all response codes in the range from 400
                        to 499.</db:para>
                    <db:para>
                        <emphasis role="italic"
                            >content-type</emphasis>:Content type
                        specifies for which response content types
                        this style sheet chain should be applied. For
                        example, application/xml. </db:para>
                    <db:para>
                        <emphasis role="italic"
                        >accept</emphasis>:Specifies to which Accept
                        type this chain should be applied. For
                        example, application/xml. </db:para>
                    <db:para>
                        <emphasis role="italic"
                            >translated-content-type:</emphasis>
                        Specifies the content-type which is output by
                        this chain. The response content-type is set
                        to this if the style sheets are
                        applied successfully.</db:para>
                    <db:para>
                        <emphasis role="bold"
                            >&lt;style-sheets>:</emphasis> This
                        element contains the list of style sheets to
                        be applied for this translation
                        chain.</db:para>
                    <db:para><emphasis role="bold">
                            &lt;style></emphasis>: This element
                        specifies one style sheet within the
                        chain.</db:para>
                    <db:para>
                        <emphasis role="italic">id</emphasis>:a unique
                        id for this style sheet. </db:para>
                    <db:para>
                        <emphasis role="italic">href</emphasis>:URI
                        which specifies the location of the style
                        sheet. If a relative path is specified, then
                        this will be relative to the REPOSE
                        configuration
                        directory.</db:para>
                    <db:para>
                        <emphasis role="bold">&lt;param>:</emphasis> A
                        style sheet can accept any number of
                        parameters. These parameters will be passed
                        into the transform associated with the style
                        sheet.</db:para>
                    <db:para>
                        <emphasis role="italic">name </emphasis>: Name
                        of the parameter to be passed in. </db:para>
                    <db:para>
                        <emphasis role="italic">value</emphasis> :
                        Value of the parameter to be passed in. </db:para>
                    <db:para><emphasis role="bold"
                        >&lt;xsl></emphasis>: A style sheet can
                        contain an embedded XSL. The embedded XSL
                        would be placed within an xsl element within
                        the style element. If the XSL is embedded,
                        then the href attribute of the style element
                        would not be specified. </db:para>
                <para> </para>
            </callout>
        </calloutlist>
        </section>
            <section xml:id="Customizing_Translation_Stylesheet-d1e385">
                <title>Customizing a Translation Stylesheet</title>
                <para> 
                    The &PRODNAME; translation component uses 
                    <link xlink:href="http://www.w3.org/TR/xslt20/">XSLT 2.0 stylesheets</link> to process messages. 
                    One place to learn the basics of XLST is the 
                    <link xlink:href="http://www.w3schools.com/xsl/xsl_w3celementref.asp">XSLT Elements Reference</link>.
                </para>
                <para> You can create and combine multiple stylesheets
                to accomplish the translation you require. The
                translation component allows dynamic updates so that
                the translation XSL files can be updated at runtime.
                To make stylesheets active within your &PRODNAME;
                configuration, specify the stylesheets in
                    <code>translation.cfg.xml</code> as shown at <xref
                    linkend="Customizing_Translation_Configuration-d1e375"
                /> You can store a stylesheet as a standalone file or
                you can embed the XSL style specification within
                    <code>translation.cfg.xml</code>.</para>
                <para> A valid stylesheet resembles the following
                example: </para>
                <example>
                    <title>Translation Stylesheet (Standalone)</title>
<programlisting language="xml">
<xi:include href="samples/repose-translation-identity.xsl" parse="text"/>
</programlisting>
                </example>
                <para> By using an <code>xsl</code> element within the
                    <code>style</code> element, you can embed XSL
                directly into the translation configuration file
                rather than storing it as an external stylesheet file. 
                The following example uses stylesheets in both ways, with one stored externally as
                <code>identity.xsl</code> and one embedded in the configuration file.
                </para>
                <example>
                    <title>Translation Stylesheet (Embedded)</title>
                    <programlisting language="xml">
<xi:include href="samples/repose-translation-stylesheet-embedded.xml" parse="text"/>
</programlisting>
                </example>
        </section>
    </chapter>
    <chapter xml:id="Change_Format-d1e105">
        <title>Changing Any Message's Format</title>
        <para> You can translate an XML message from JSON, Atom, or
            HTML. You can translate a JSON message to JSONx, which
            resembles XML; you can also translate a JSONX message to
            JSON. </para>
        <section xml:id="Translate_XML2JSON-d1e115">
            <title>Translating XML to JSON</title>
            <para> You can translate XML to JSON.</para>
            <example>
                <title>Translation from XML to JSON</title>
                <programlisting language="xml">
<xi:include href="samples/repose-translation-XML2json.xml" parse="text"/>
</programlisting>
            </example>
            <para>
                You can use cURL to confirm
                that you have the stylesheet and the translation configuration set up correctly; if they are correct,
                the XML input you provide will be echoed as JSON. 
                <note>
                    <para> This cURL example requires a file named
                            <code>absolute-limits.xml</code>. You can
                        see an example of
                            <code>absolute-limits.xml</code> attached
                        to the translation component's wiki page at
                            <link
                            xlink:href="http://wiki.openrepose.org/display/REPOSE/Translation"
                            >http://wiki.openrepose.org/display/REPOSE/Translation</link>. </para>
                </note>
                <example>
                    <title>cURL Confirming Translation from XML to JSON</title>
                    <important>
                        <para> This cURL example requires a file named
                            <code>absolute-limits.xml</code>. You can
                            see an example of
                            <code>absolute-limits.xml</code> attached
                            to the translation component's wiki page at
                            <link
                                xlink:href="http://wiki.openrepose.org/display/REPOSE/Translation"
                                >http://wiki.openrepose.org/display/REPOSE/Translation</link>; 
                            that wiki page also explains where to place <code>absolute-limits.xml</code>. </para>
                    </important>
                    <programlisting language="xml">
<xi:include href="samples/repose-translation-curl-confirm-xml2json.xml" parse="text"/>
</programlisting>
                </example>
            </para>
        </section>
        <section xml:id="Translate_XML2Atom-d1e117">
            <title>Translating XML to Atom</title>
            <para> You can translate XML to Atom.</para>
            <example>
                <title>Translation from XML to Atom</title>
                <programlisting language="xml">
<xi:include href="samples/repose-translation-XML2atom.xml" parse="text"/>
</programlisting>
            </example>
            <para>
                You can use cURL to confirm
                that you have the stylesheet and the translation configuration set up correctly; if they are correct,
                the XML input you provide will be echoed as Atom. 
                <example>
                    <title>cURL Confirming Translation from XML to Atom</title>
                    <important>
                        <para> This cURL example requires a file named
                            <code>version.xml</code>. You can
                            see an example of
                            <code>version.xml</code> attached
                            to the translation component's wiki page at
                            <link
                                xlink:href="http://wiki.openrepose.org/display/REPOSE/Translation"
                                >http://wiki.openrepose.org/display/REPOSE/Translation</link>; 
                            that wiki page also explains where to place <code>version.xml</code>. 
                        </para>
                    </important>
                    <programlisting language="xml">
<xi:include href="samples/repose-translation-curl-confirm-xml2atom.xml" parse="text"/>
</programlisting>
                </example>
            </para>
        </section>
        <section xml:id="Translate_XML2HTML-d1e119">
            <title>Translating XML to HTML</title>
            <para> You can translate XML to HTML.</para>
            <example>
                <title>Translation from XML to HTML</title>
                <programlisting language="xml">
<xi:include href="samples/repose-translation-XML2html.xml" parse="text"/>
</programlisting>
            </example>
            <para> You can use cURL to confirm that you have the
                stylesheet and the translation configuration set up
                correctly; if they are correct, the XML input you
                provide will be echoed as HTML. <example>
                    <title>cURL Confirming Translation from XML to
                        HTML</title>
                    <important>
                        <para> This cURL example requires a file named
                                <code>version.xml</code>. You can see
                            an example of <code>version.xml</code>
                            attached to the translation component's
                            wiki page at <link
                                xlink:href="http://wiki.openrepose.org/display/REPOSE/Translation"
                                >http://wiki.openrepose.org/display/REPOSE/Translation</link>;
                            that wiki page also explains where to
                            place <code>version.xml</code>. </para>
                    </important>
                    <programlisting language="xml">
<xi:include href="samples/repose-translation-curl-confirm-xml2html.xml" parse="text"/>
</programlisting>
                </example></para></section></chapter>

<chapter xml:id="Working_JSON-111">
            <title>Working With JSON</title>
                   <para>You can use the &PRODNAME; translation
            component to turn all elements found in JSON input into
            XML-shaped JSONx output. <table border="1" frame="box">
                <?dbfo keep-together="always"?>
                <caption>JSON Input Becomes JSONx Output</caption>
                <thead>
                    <tr>
                        <th>Input: JSON</th>
                        <th>Translation</th>
                        <th>Output: JSONx</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>
                            <programlisting language="javascript">
<![CDATA[        
{"field1": "value1", "field2": "value2"}
]]>
</programlisting>
                        </td>
                        <td>Apply stylesheet as defined in translation
                            configuration.</td>
                        <td>
                            <!-- if no CDATA here, DocBook tries & fails to interpret <json:object> as markup -->
                            <programlisting language="xml">
<![CDATA[    
<json:object xmlns:json="http://www.ibm.com/xmlns/prod/2009/jsonx" 
             xmlns:xsd="http://www.w3.org/2001/XMLSchema">
   <json:string name="field1">value1</json:string>
   <json:string name="field2">value2</json:string>
</json:object>
]]>
</programlisting>
                        </td>
                    </tr>
                </tbody>
            </table>
        </para>
            <para> To make this possible, create a stylesheet to
                define the transformation, and call for that
                stylesheet in your translation configuration,
                    <code>translation.cfg.xml</code>. To create the
                result shown above, fully translating JSON input to
                JSONx output, create a stylesheet and a translation
                configuration that includes the stylesheet as shown
                below: 
                <table border="1" frame="box">
                    <?dbfo keep-together="always"?>
                    <caption>Stylesheet Applied by Translation
                        Configuration: Translating JSON to
                        JSONx</caption>
                    <thead>
                        <tr>
                            <th>Stylesheet: identity.xsl</th>
                            <th>Translation Configuration:
                                translation.cfg.xml</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>
<programlisting language="xml">
<xi:include href="samples/repose-translation-identity.xsl" parse="text"/>
</programlisting>
                            </td>
                            <td>
<programlisting language="xml">
<xi:include href="samples/repose-translation-cfg-json2jsonx.xml" parse="text"/>
</programlisting>
                            </td>
                        </tr>
                    </tbody>
                </table>
            </para>
            <para> In the stylesheet, <code>&lt;xsl:copy-of
                    select="."/&gt;</code> asks for a copy of the
                entire document. In the translation configuration, the
                stylesheet is called for by its name
                    (<code>identity.xsl</code>) ;
                    <code>content-type</code> identifies the expected
                input as JSON and <code>translated-content-type</code>
                identifies the expected output as XML.</para>
            <para>
                You can use cURL to confirm
                that you have the stylesheet and the translation configuration set up correctly; if they are correct,
                the JSON input you provide will be echoed as JSONx. 
                <example>
                    <title>cURL Confirming Translation from JSON to JSONx</title>
<programlisting language="xml">
<xi:include href="samples/repose-translation-curl-confirm-json2jsonx.xml" parse="text"/>
</programlisting>
                </example>
            </para>
               
        
    <section xml:id="Translate_JSON2JSONX-d1e123">
        <title>Translating JSON to JSONX</title>
            <para> You can use the &PRODNAME; translation component to
                turn all elements found in JSON input into XML-shaped
                JSONx output and then back into JSON. For details
                about translating JSON to JSONx, see 
                <xref linkend="Translate_JSON2JSONX-d1e123"></xref>.
            </para>

            <para> You can use cURL to confirm that you have the
                stylesheet and the translation configuration set up
                correctly; if they are correct, the JSON input you
                provide will be echoed as JSON. The translation
                component allows services to receive request message
                content as JSONx when the message content of the
                request that is sent to the service is JSON. JSON
                content will automatically be converted to JSONx when
                the request or response body contains JSON data. See
                below for an example. Click here to read more about
                JSONx. JSONx content can be converted back to JSON by
                using the jsonx2json.xsl style sheet.<example>
                    <title>cURL Confirming Translation from JSON to
                        JSONx to JSON</title>
                    <programlisting language="xml">
<xi:include href="samples/repose-translation-curl-confirm-json2jsonx2json.xml" parse="text"/>
</programlisting>
                </example>
            </para> </section>
            </chapter>

    <chapter xml:id="Change_Content-d1e125">
        <title> Accessing and Modifying Request Data</title>
        <para> You can use the translation component to rewrite the
            same message with some content added or removed. As of
            Repose 2.6.0, the translation component will automatically
            remove, without expanding, user defined entities from
            requests and responses. This is to prevent XXE attacks
            against Repose or any service behind Repose.</para>
        <section xml:id="Adding_Content-d1e127">
            <title>Adding Content to a Message</title>
            <para> You can use the &PRODNAME; translation component to
                add an element to a copy of an incoming message so
                that element is included when the copy is forwarded. 
                <table border="1" frame="box">
                    <?dbfo keep-together="always"?>
                    <caption>XML Input Becomes Shorter XML
                        Output</caption>
                    <thead>
                        <tr>
                            <th>Input: Original XML Message</th>
                            <th>Translation</th>
                            <th>Output: Shortened XML Message</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>
                                <programlisting language="javascript">
<![CDATA[        
<a>Stuff</a>
]]>
</programlisting>
                            </td>
                            <td>Apply stylesheets as defined in
                                translation configuration.</td>
                            <td>
                                <!-- if no CDATA here, DocBook tries & fails to interpret <json:object> as markup -->
                                <programlisting language="xml">
<![CDATA[    
<add-me><a>Stuff</a></add-me>
]]>
</programlisting>
                            </td>
                        </tr>
                    </tbody>
                </table>
            </para>
            <para> To make this possible, create stylesheets to define
                the transformations, and call for those stylesheets in
                your translation configuration,
                <code>translation.cfg.xml</code>. To create the
                result shown above, deleting the
                <code>remove-me</code> element, create a
                stylesheet asking for a complete copy,
                (<code>identify.xsl</code>), another stylesheet
                asking for addition of specific content to the copy
                (<code>add-element.xsl</code>), and a
                translation configuration that includes both
                stylesheets as shown below: <table border="1"
                    frame="box">
                    <?dbfo keep-together="always"?>
                    <caption>Stylesheets Applied by Translation
                        Configuration: Adding Content to an XML
                        Message</caption>
                    <thead>
                        <tr>
                            <th>Stylesheets: identity.xsl +
                                add-element.xsl</th>
                            <th>Translation Configuration:
                                translation.cfg.xml</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>
                                <programlisting language="xml">
<xi:include href="samples/repose-translation-identity.xsl" parse="text"/>
</programlisting>
                                <programlisting language="xml">
<xi:include href="samples/repose-translation-add-element.xsl" parse="text"/>
</programlisting>
                            </td>
                            <td>
                                <programlisting language="xml">
<xi:include href="samples/repose-translation-cfg-add.xml" parse="text"/>
</programlisting>
                            </td>
                        </tr>
                    </tbody>
                </table>
            </para>
            <para> In the <code>identify.xsl</code> stylesheet,
                    <code>&lt;xsl:copy-of select="."/&gt;</code> asks
                for a copy of the entire document. In the
                    <code>add-element.xsl</code> stylesheet,
                    <code>add-me</code> asls for anything marked with
                that wrapper to be added to the message as another
                wrapper around the entire message. In the translation
                configuration, the stylesheets are called for by their
                names (<code>identity.xsl</code> and
                    <code>add-element.xsl</code>);
                    <code>content-type</code> identifies the expected
                input as XHTML+XML and
                    <code>translated-content-type</code> identifies
                the expected output as XML;
                    <code>code-regex="2[\d]{2}</code> applies this
                stylesheet chain only to responses with a status code
                in the range of 2xx.</para>
            <para>
                You can use cURL to confirm
                that you have the stylesheet and the translation configuration set up correctly; if they are correct,
                the element you asked to add will be echoed in the output. 
                <example>
                    <title>cURL Confirming Addition to Message</title>
                    <programlisting language="xml">
<xi:include href="samples/repose-translation-curl-confirm-add.xml" parse="text"/>
</programlisting>
                </example>
            </para>
        </section>
        <section xml:id="Deleting_Content-d1e129">
            <title>Deleting Content from a Message</title>
            <para> You can use the &PRODNAME; translation component to
                delete an element from a copy of an incoming message
                so that element is omitted when the copy is forwarded. 
            <table border="1" frame="box">
                <?dbfo keep-together="always"?>
                <caption>XML Input Becomes Shorter XML
                        Output</caption>
                <thead>
                    <tr>
                        <th>Input: Original XML Message</th>
                        <th>Translation</th>
                        <th>Output: Shortened XML Message</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>
                            <programlisting language="javascript">
<![CDATA[        
<a><remove-me>test</remove-me>Stuff</a>
]]>
</programlisting>
                        </td>
                        <td>Apply stylesheets as defined in
                                translation configuration.</td>
                        <td>
                            <!-- if no CDATA here, DocBook tries & fails to interpret <json:object> as markup -->
                            <programlisting language="xml">
<![CDATA[    
<a>Stuff</a>
]]>
</programlisting>
                        </td>
                    </tr>
                </tbody>
            </table>
            </para>
            <para> To make this possible, create stylesheets to define
                the transformations, and call for those stylesheets in
                your translation configuration,
                    <code>translation.cfg.xml</code>. To create the
                result shown above, deleting the
                    <code>remove-me</code> element, create a
                stylesheet asking for a complete copy,
                    (<code>identify.xsl</code>), another stylesheet
                asking for removal of specific content from the copy
                    (<code>remove-element.xsl</code>), and a
                translation configuration that includes both
                stylesheets as shown below: <table border="1"
                    frame="box">
                    <?dbfo keep-together="always"?>
                    <caption>Stylesheets Applied by Translation
                        Configuration: Deleting Content from an XML
                        Message</caption>
                    <thead>
                        <tr>
                            <th>Stylesheets: identity.xsl +
                                remove-element.xsl</th>
                            <th>Translation Configuration:
                                translation.cfg.xml</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>
                                <programlisting language="xml">
<xi:include href="samples/repose-translation-identity.xsl" parse="text"/>
</programlisting>
                                <programlisting language="xml">
<xi:include href="samples/repose-translation-remove-element.xsl" parse="text"/>
</programlisting>
                            </td>
                            <td>
                                <programlisting language="xml">
<xi:include href="samples/repose-translation-cfg-remove.xml" parse="text"/>
</programlisting>
                            </td>
                        </tr>
                    </tbody>
                </table>
            </para>
            <para> In the <code>identify.xsl</code> stylesheet,
                    <code>&lt;xsl:copy-of select="."/&gt;</code> asks
                for a copy of the entire document. In the
                    <code>remove-element.xsl</code> stylesheet,
                    <code>remove-me</code> asls for anything marked
                with that wrapper to be deleted. In the translation
                configuration, the stylesheets are called for by their
                names (<code>identity.xsl</code> and
                    <code>remove-element.xsl</code>);
                    <code>content-type</code> identifies the expected
                input as XML and <code>translated-content-type</code>
                identifies the expected output as XML;
                    <code>code-regex="2[\d]{2}</code> applies this
                stylesheet chain only to responses with a status code
                in the range of 2xx.</para>
            <para>
                You can use cURL to confirm
                that you have the stylesheet and the translation configuration set up correctly; if they are correct,
                the element you asked to remove will be missing from the output. 
                <example>
                    <title>cURL Confirming Deletion from
                        Message</title>
                    <programlisting language="xml">
<xi:include href="samples/repose-translation-curl-confirm-delete.xml" parse="text"/>
</programlisting>
                </example>
            </para>
        </section>
    </chapter>
    <xi:include href="chapters/afterword.xml"/>
</book>
